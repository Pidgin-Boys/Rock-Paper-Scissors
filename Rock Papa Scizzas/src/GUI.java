import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;

public class GUI extends javax.swing.JFrame
{   
    private Integer round;
    private Integer maxRounds;
    private DecisionEngine engine;
    private Dimension dimensions;
    private String listTop = " Round # | Your Choice | AI Choice | Result ";
    private static ResultDatabase history;    
    private static final String predictionText = "Select Rock, Paper, or Scissors below to begin playing.";
    private static final String scoreText = "Wins: 0 Losses: 0 Draws: 0";
    
    public GUI() 
    {
        history = new ResultDatabase();
        initComponents();
        dimensions = getSize(); // store the size of the main window
        setSize(initialPanel.getSize()); // resize to startup menu
        round = 0;
        roundHistoryList.setListData(new String[]{listTop});
        setVisible(true);
    }
    
    /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layerPane = new javax.swing.JLayeredPane();
        gamePanel = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        rockButton = new javax.swing.JButton();
        paperButton = new javax.swing.JButton();
        scissorsButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(30, 20), new java.awt.Dimension(10, 32767));
        newGameButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        listAreaLayerPane = new javax.swing.JLayeredPane();
        roundHistoryPanel = new javax.swing.JPanel();
        roundHistoryScrollPane = new javax.swing.JScrollPane();
        roundHistoryList = new javax.swing.JList();
        predictionLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        resultLabel = new javax.swing.JLabel();
        helpPanel = new javax.swing.JPanel();
        helpText = new javax.swing.JTextArea();
        initialPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        aiChoiceList = new javax.swing.JScrollPane();
        aiField = new javax.swing.JList();
        roundsLabel = new javax.swing.JLabel();
        aiLabel = new javax.swing.JLabel();
        roundsField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        errorMessageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rock Paper Scissors");
        setResizable(false);

        rockButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        rockButton.setText("Rock");
        rockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rockButtonActionPerformed(evt);
            }
        });
        menuPanel.add(rockButton);

        paperButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        paperButton.setText("Paper");
        paperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperButtonActionPerformed(evt);
            }
        });
        menuPanel.add(paperButton);

        scissorsButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        scissorsButton.setText("Scissors");
        scissorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scissorsButtonActionPerformed(evt);
            }
        });
        menuPanel.add(scissorsButton);
        menuPanel.add(filler1);

        newGameButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        newGameButton.setText("New Game");
        newGameButton.setMaximumSize(new java.awt.Dimension(110, 29));
        newGameButton.setMinimumSize(new java.awt.Dimension(110, 29));
        newGameButton.setPreferredSize(new java.awt.Dimension(120, 30));
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });
        menuPanel.add(newGameButton);

        helpButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        menuPanel.add(helpButton);

        exitButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        menuPanel.add(exitButton);

        roundHistoryPanel.setMaximumSize(new java.awt.Dimension(32765, 32765));

        roundHistoryList.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        roundHistoryList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        roundHistoryScrollPane.setViewportView(roundHistoryList);

        predictionLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        predictionLabel.setText("Select Rock, Paper, or Scissors below to begin playing.");
        predictionLabel.setMinimumSize(new java.awt.Dimension(0, 0));

        scoreLabel.setBackground(new java.awt.Color(250, 250, 250));
        scoreLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        scoreLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        scoreLabel.setText("Wins: 0 Losses: 0 Draws: 0");

        resultLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        javax.swing.GroupLayout roundHistoryPanelLayout = new javax.swing.GroupLayout(roundHistoryPanel);
        roundHistoryPanel.setLayout(roundHistoryPanelLayout);
        roundHistoryPanelLayout.setHorizontalGroup(
            roundHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundHistoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roundHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(predictionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roundHistoryPanelLayout.createSequentialGroup()
                        .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scoreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(roundHistoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        roundHistoryPanelLayout.setVerticalGroup(
            roundHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundHistoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roundHistoryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(predictionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(roundHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        roundHistoryPanel.setBounds(0, 0, 610, 583);
        listAreaLayerPane.add(roundHistoryPanel, new Integer(2));

        helpText.setBackground(new java.awt.Color(240, 240, 240));
        helpText.setColumns(20);
        helpText.setEditable(false);
        helpText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        helpText.setRows(5);
        helpText.setText("To play this Rock-Paper-Scissors game simply click one of the\n\"Rock\", \"Paper\", or \"Scissors\" buttons shown at the bottom of the\nscreen.\n\nWhen you make a selection, the computer will calculate its choice\nbased on the AI Engine you chose at startup. Then, the result and\nup to 99 previous results will be displayed in a descending list in \nthe center of the window.\n\nAt the bottom of the window a running tally of the score will be\ndisplayed, as well as the computer's prediction of your next move\nand whether you won, lost, or tied in the last round.\n\nTo return to the game, click \"Help\" below.");
        helpText.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Help", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 20))); // NOI18N

        javax.swing.GroupLayout helpPanelLayout = new javax.swing.GroupLayout(helpPanel);
        helpPanel.setLayout(helpPanelLayout);
        helpPanelLayout.setHorizontalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(helpText, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addContainerGap())
        );
        helpPanelLayout.setVerticalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, helpPanelLayout.createSequentialGroup()
                .addContainerGap(113, Short.MAX_VALUE)
                .addComponent(helpText, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
        );

        helpPanel.setBounds(-10, 0, 590, 590);
        listAreaLayerPane.add(helpPanel, new Integer(1));

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listAreaLayerPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gamePanelLayout.createSequentialGroup()
                .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addContainerGap())
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addComponent(listAreaLayerPane, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        gamePanel.setBounds(0, -10, 600, 630);
        layerPane.add(gamePanel, new Integer(1));

        aiField.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        aiField.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Smart", "Random" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        aiField.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        aiChoiceList.setViewportView(aiField);

        roundsLabel.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        roundsLabel.setText("Enter the number of rounds:");

        aiLabel.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        aiLabel.setText("Select the AI Engine to use:");

        roundsField.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        cancelButton.setText("Cancel");
        cancelButton.setActionCommand("cancelButton");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.setActionCommand("okButton");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        errorMessageLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        errorMessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(okButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton))
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(roundsLabel)
                                .addComponent(aiLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aiChoiceList, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(roundsField)))
                    .addComponent(errorMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aiLabel)
                    .addComponent(aiChoiceList, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roundsLabel)
                    .addComponent(roundsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout initialPanelLayout = new javax.swing.GroupLayout(initialPanel);
        initialPanel.setLayout(initialPanelLayout);
        initialPanelLayout.setHorizontalGroup(
            initialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        initialPanelLayout.setVerticalGroup(
            initialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(initialPanelLayout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        initialPanel.setBounds(-10, -10, 400, 230);
        layerPane.add(initialPanel, new Integer(2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 621, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(layerPane, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 637, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(layerPane, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        String engType = (String) aiField.getSelectedValue();
        try { maxRounds = Integer.valueOf(roundsField.getText()); }
        catch (NumberFormatException e) {}
        
        String error = null;
        if (engType == null)
        {
            error = (maxRounds == null)
                    ? "You must select an engine type and number of round."
                    : "You must select an engine type to continue.";
        }
        else if (maxRounds == null)
            error = "You must enter the number of round to continue.";
        errorMessageLabel.setText(error);        
        
        if (engType != null && round != null)
        {
            initialPanel.setVisible(false);
            gamePanel.setVisible(true);
            engine = DecisionEngine.make(engType.toLowerCase());
            setSize(dimensions);
        }
    }//GEN-LAST:event_okButtonActionPerformed
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        dispose();
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

private void paperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperButtonActionPerformed
    processChoice(Choice.PAPER);
}//GEN-LAST:event_paperButtonActionPerformed

private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
    processChoice(Choice.HELP);   
}//GEN-LAST:event_helpButtonActionPerformed

private void rockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rockButtonActionPerformed
    processChoice(Choice.ROCK);
}//GEN-LAST:event_rockButtonActionPerformed

private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
    processChoice(Choice.EXIT);
}//GEN-LAST:event_exitButtonActionPerformed

private void scissorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scissorsButtonActionPerformed
    processChoice(Choice.SCISSORS);
}//GEN-LAST:event_scissorsButtonActionPerformed

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        // reset EVERYTHING and make the initial panel visible again
        round = 0;
        setSize(initialPanel.getSize());
        initialPanel.setVisible(true);
        history = new ResultDatabase();
        listTop = " Round # | Your Choice | AI Choice | Result ";
        roundHistoryList.setListData(new String[]{listTop});
        rockButton.setEnabled(true);
        paperButton.setEnabled(true);
        scissorsButton.setEnabled(true);
        predictionLabel.setText(predictionText);
        scoreLabel.setText(scoreText);
        resultLabel.setText(null);
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void processChoice(Choice choice)
    {
        switch (choice.getValue()) 
        {
            case 1: // rock
            case 2: // paper
            case 3: // scissors
                ++round;
                
                // add the result to the database
                Result result = new Result(choice, engine.getComputerChoice(history));
                history.add(result);
                
                // get the next predicted move and display
                Choice predicted = engine.getComputerChoice(history);
                if (predicted.equals(Choice.ROCK)) 
                    predicted = Choice.SCISSORS;
                else if (predicted.equals(Choice.PAPER)) 
                    predicted = Choice.ROCK;
                else
                    predicted = Choice.PAPER;
                
                // show the prediction, or hide it if random
                predictionLabel.setText(engine instanceof RandomEngine
                        ? null
                        : "The computer predicts that you will choose " + predicted);             
                
                // update score
                int[] s = history.getScore();
                scoreLabel.setText(String.format("Wins: %s Losses: %s Draws: %s", s[0], s[1], s[2]));
                
                // update last result
                resultLabel.setText(String.format("%s round %d / %d.", history.getLastOutcome(), round, maxRounds));
                
                // check for game over
                if (round >= maxRounds) 
                {
                    int[] score = history.getScore();
                    if (score[0] > score[1])
                        listTop = "You won! Click \"New Game\" to start a new game.";
                    else if (score[0] < score[1])
                        listTop = "You lost! Click \"New Game\" to start a new game.";
                    else
                        listTop = "You tied! Click \"New Game\" to start a new game.";
                    rockButton.setEnabled(false);
                    paperButton.setEnabled(false);
                    scissorsButton.setEnabled(false);               
                }
                
                // display results in descending order
                final int numberToDisplay = 100;
                LinkedList<String> results = history.getResults();
                Iterator<String> iter = results.descendingIterator();
                ArrayList<String> listData = new ArrayList<>(numberToDisplay);
                listData.add(listTop);
                
                int i = 0;
                while(++i < numberToDisplay+1 && iter.hasNext())
                    listData.add(iter.next());
                roundHistoryList.setListData(listData.toArray());
                break;
            case 4: 
                // hide the round history to show the help text and vice versa
                if (roundHistoryPanel.isVisible())
                {
                    rockButton.setEnabled(false);      
                    paperButton.setEnabled(false);
                    scissorsButton.setEnabled(false);  
                    roundHistoryPanel.setVisible(false);
                    helpButton.setText("Back");
                }
                else
                {   // don't reactivate buttons if game over
                    if (round < maxRounds)
                    {
                        rockButton.setEnabled(true);      
                        paperButton.setEnabled(true);
                        scissorsButton.setEnabled(true);  
                    }
                    roundHistoryPanel.setVisible(true);
                    helpButton.setText("Help");
                }                
                break;
            case 6:
                setVisible(false);
                dispose();
                System.exit(0);           
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane aiChoiceList;
    private javax.swing.JList aiField;
    private javax.swing.JLabel aiLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JButton helpButton;
    private javax.swing.JPanel helpPanel;
    private javax.swing.JTextArea helpText;
    private javax.swing.JPanel initialPanel;
    private javax.swing.JLayeredPane layerPane;
    private javax.swing.JLayeredPane listAreaLayerPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton newGameButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton paperButton;
    private javax.swing.JLabel predictionLabel;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JButton rockButton;
    private javax.swing.JList roundHistoryList;
    private javax.swing.JPanel roundHistoryPanel;
    private javax.swing.JScrollPane roundHistoryScrollPane;
    private javax.swing.JTextField roundsField;
    private javax.swing.JLabel roundsLabel;
    private javax.swing.JButton scissorsButton;
    private javax.swing.JLabel scoreLabel;
    // End of variables declaration//GEN-END:variables
}
